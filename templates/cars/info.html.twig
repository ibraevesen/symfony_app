{% extends 'base.html.twig' %}

{% block title %}Car info{% endblock %}

{% block body %}

    <div class="container mt-4">
        <h1>Car info</h1>

        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col">
                    <div>
                        {% if model.photo %}
                            <img src="{{ asset(model.photo) }}" class="card-img-top car-image" alt="Фото автомобиля">
                        {% else %}
                            <img src="{{ asset('uploads/default.jpg') }}" class="card-img-top car-image" alt="Фото автомобиля">
                        {% endif %}
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">{{ model.car.brand }}</h5>
                        <h6 class="card-subtitle mb-2 text-muted">Модель: {{ model.model }}</h6>
                        <p class="car-price">Цена: {{ model.modelPrice }} USD</p>
                        <p class="card-text">Описание: {{ model.description }}</p>
                        <div class="d-flex gap-2">
                            <a href="{{ path('app_cars_index') }}" class="btn btn-primary">На главную</a>
                            {% if is_granted('ROLE_USER') and not is_granted('ROLE_ADMIN') %}
                                <div id="paypal-button-container"></div>
                                <p id="result-message"></p>
                            {% elseif not is_granted('IS_AUTHENTICATED_FULLY') %}
                                <p>Для покупки необходимо войти в систему.</p>
                            {% endif %}
                            {% if is_granted('ROLE_ADMIN') %}
                                <!-- Кнопка для открытия модального окна с историей покупок -->
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#buyHistoryModal">
                                    История покупок
                                </button>

                                <!-- Edit button for the model -->
                                <button class="btn btn-warning text-white" data-bs-toggle="modal" data-bs-target="#editCarModal"
                                        data-id="{{ model.id }}"
                                        data-brand="{{ model.car.brand }}"
                                        data-model="{{ model.model }}"
                                        data-price="{{ model.modelPrice }}"
                                        data-description="{{ model.description }}">
                                    Edit
                                </button>

                                <!-- Delete button for the model -->
                                <form method="post" action="{{ path('app_cars_delete', {'id': model.id}) }}" onsubmit="return confirm('Are you sure you want to delete this model?');">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ model.id) }}">
                                    <button class="btn btn-danger">Delete</button>
                                </form>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Car Modal -->
    <div class="modal fade" id="editCarModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Car</h5>
                    <button class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editCarForm">
                        <input type="hidden" id="modelId" value="">
                        <div class="mb-3">
                            <label for="modelBrand" class="form-label">Brand:</label>
                            <input id="modelBrand" name="editBrand" class="form-control" value="" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="carModel" class="form-label">Model:</label>
                            <input type="text" id="carModel" name="model" class="form-control" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="carPrice" class="form-label">Price:</label>
                            <input type="number" id="carPrice" name="price" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label for="carDescription" class="form-label">Description:</label>
                            <input type="text" id="carDescription" name="description" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label for="carPhoto" class="form-label">Photo:</label>
                            <input type="file" id="carPhoto" name="photo" class="form-control">
                        </div>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="buyHistoryModal" tabindex="-1" aria-labelledby="buyHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="buyHistoryModalLabel">
                        История покупок для модели {{ model.model }}
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    {% if model.buyHistories|length > 0 %}
                        <table class="table table-striped">
                            <thead>
                            <tr>
                                <th>ID</th>
                                <th>Сумма</th>
                                <th>Paypal Transaction ID</th>
                                <th>Дата и время оплаты</th>
                                <th>ID модели автомобиля</th>
                            </tr>
                            </thead>
                            <tbody>
                            {% for history in model.buyHistories %}
                                <tr>
                                    <td>{{ history.id }}</td>
                                    <td>{{ history.amountPaid }}</td>
                                    <td>{{ history.paypalTransactionId }}</td>
                                    <td>{{ history.datetimePaid|date('d-m-Y H:i:s') }}</td>
                                    <td>{{ history.modelId.id }}</td>
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    {% else %}
                        <p>Нет истории покупок для этой модели.</p>
                    {% endif %}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        Закрыть
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle Edit Car Modal
            const editCarModal = document.getElementById('editCarModal');
            editCarModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget; // The button that triggered the modal
                const modelId = button.getAttribute('data-id');
                const brand = button.getAttribute('data-brand');
                const model = button.getAttribute('data-model');
                const price = button.getAttribute('data-price');
                const description = button.getAttribute('data-description');
                console.log('model id ', modelId, ' brand ', brand, ' model ', model, ' price ', price);

                // Fill the form fields
                document.getElementById('modelId').value = modelId;
                document.getElementById('modelBrand').value = brand;
                document.getElementById('carModel').value = model;
                document.getElementById('carPrice').value = price;
                document.getElementById('carDescription').value = description;
            });

            // Handle Edit Car form submission
            document.getElementById('editCarForm').addEventListener('submit', function (e) {
                e.preventDefault();

                const modelId = document.getElementById('modelId').value;
                const price = document.getElementById('carPrice').value;
                const description = document.getElementById('carDescription').value;
                const photo = document.getElementById('carPhoto').files[0];

                const formData = new FormData();
                formData.append('id', modelId);
                formData.append('price', price);
                formData.append('description', description);
                if (photo) {
                    formData.append('photo', photo);
                }

                fetch('/car/update', {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            // Найти карточку и обновить данные
                            const card = document.querySelector(`button[data-id="${modelId}"]`).closest('.card-body');
                            card.querySelector('.car-price').textContent = 'Цена: ' + price + ' USD';
                            card.querySelector('.card-text').textContent = 'Описание: ' + description;  // Обновить описание

                            // Обновить фото, если оно было изменено
                            if (photo && data.updatedData.photo) {
                                const imgElement = card.querySelector('.car-image');
                                if (imgElement) {
                                    imgElement.src = data.updatedData.photo;  // Обновить фото
                                }
                            }

                            // Обновить data-атрибуты кнопки "Edit"
                            const editButton = document.querySelector(`button[data-id="${modelId}"][data-bs-toggle="modal"]`);
                            editButton.setAttribute('data-description', data.updatedData.description);
                            editButton.setAttribute('data-price', data.updatedData.price);

                            // Закрыть модальное окно
                            bootstrap.Modal.getInstance(editCarModal).hide();
                        } else {
                            alert('Error updating car: ' + data.message);
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    </script>
    <script
            src="https://www.paypal.com/sdk/js?client-id=AY5Rdu8kbJHWHk8efPzpgbMjb8hUiGO0iE3CeokVGoXSaqfLJt4e2b4zXzzOezMjvny0N9IX2bOOQGcL&buyer-country=US&currency=USD&components=buttons&disable-funding=venmo,paylater,card"
            data-sdk-integration-source="developer-studio"
    ></script>
    <script>
        document.addEventListener("turbo:load", function() {
            // Если контейнер для кнопки присутствует на странице, инициализируем PayPal
            if (document.getElementById("paypal-button-container")) {
                if (window.paypal) {
                    initPaypalButton();
                } else {
                    loadPaypalSdk(initPaypalButton);
                }
            }
        });

        // Если вы не используете Turbo, можно использовать DOMContentLoaded:
        document.addEventListener("DOMContentLoaded", function() {
            if (document.getElementById("paypal-button-container")) {
                if (window.paypal) {
                    initPaypalButton();
                } else {
                    loadPaypalSdk(initPaypalButton);
                }
            }
        });

        function loadPaypalSdk(callback) {
            // Создаем новый тег script для загрузки SDK
            var script = document.createElement("script");
            script.src = "https://www.paypal.com/sdk/js?client-id=AY5Rdu8kbJHWHk8efPzpgbMjb8hUiGO0iE3CeokVGoXSaqfLJt4e2b4zXzzOezMjvny0N9IX2bOOQGcL&buyer-country=US&currency=USD&components=buttons&disable-funding=venmo,paylater,card";
            script.onload = callback;
            document.head.appendChild(script);
        }

        function initPaypalButton() {
            // Если кнопка уже была инициализирована, можно очистить контейнер
            document.getElementById("paypal-button-container").innerHTML = "";

            window.paypal.Buttons({
                style: {
                    shape: "rect",
                    layout: "vertical",
                    color: "gold",
                    label: "paypal",
                },
                createOrder: async function() {
                    const response = await fetch("{{ path('create_order') }}", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            model_id: {{ model.id }}
                        })
                    });
                    const orderData = await response.json();
                    if (orderData.id) {
                        return orderData.id;
                    }
                    throw new Error("Ошибка при создании заказа");
                },
                onApprove: async function(data) {
                    const orderID = data.orderID;
                    const captureUrl = "{{ path('capture_order', { orderId: 'ORDER_ID_PLACEHOLDER' }) }}"
                        .replace('ORDER_ID_PLACEHOLDER', orderID);
                    const response = await fetch(captureUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            model_id: {{ model.id }}
                        })
                    });
                    const orderData = await response.json();
                    if (orderData.error) {
                        resultMessage(`Ошибка транзакции: ${orderData.error}`);
                    } else {
                        resultMessage(`Транзакция завершена. ID: ${orderData.purchase_units[0].payments.captures[0].id}`);
                    }
                }
            }).render("#paypal-button-container");
        }

        function resultMessage(message) {
            const container = document.querySelector("#result-message");
            container.innerHTML = message;
        }
    </script>
{% endblock %}
